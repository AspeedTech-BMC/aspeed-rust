// Licensed under the Apache-2.0 license

use crate::symmetric_cipher::{AesKey, CipherText, DesKey, Iv, PlainText, TdesKey};
use proposed_traits::common::{Endian, FromBytes};

pub struct Aes128CtrTestVec {
    pub key: AesKey,
    pub iv: Iv,
    pub ptext: PlainText,
    pub ctext: CipherText,
}

impl Default for Aes128CtrTestVec {
    fn default() -> Self {
        Self::new()
    }
}

impl Aes128CtrTestVec {
    #[must_use]
    pub fn new() -> Self {
        let key_bytes: [u8; 16] = [
            0x63, 0xea, 0x0b, 0xf5, 0xee, 0x59, 0x74, 0xc3, 0x79, 0x0f, 0x2b, 0x56, 0xed, 0x73,
            0x2a, 0x1a,
        ];
        let iv_bytes: [u8; 16] = [
            0x11, 0x31, 0xbe, 0x17, 0x7d, 0xea, 0x42, 0x61, 0x97, 0x67, 0xc2, 0x18, 0x8e, 0x12,
            0xe6, 0x5b,
        ];
        let ptext_bytes: [u8; 64] = [
            0x13, 0x64, 0xf5, 0xd8, 0x71, 0x7b, 0x0d, 0x58, 0x03, 0xca, 0x8d, 0x9a, 0xa6, 0xa3,
            0xb7, 0x43, 0x7f, 0xf5, 0x9f, 0xce, 0x63, 0x91, 0x1f, 0x0b, 0xd0, 0xb3, 0xcf, 0xba,
            0x66, 0xde, 0x9c, 0x75, 0x85, 0x3e, 0x46, 0x89, 0x78, 0x9b, 0xf4, 0x1f, 0x4c, 0x1d,
            0x1e, 0xf9, 0xa1, 0x8c, 0x1b, 0xec, 0x13, 0xa1, 0xe7, 0x60, 0xe8, 0x3f, 0x2c, 0x14,
            0xf1, 0x88, 0x52, 0x8d, 0x41, 0xbb, 0x0d, 0x4b,
        ];
        let ctext_bytes: [u8; 64] = [
            0xdd, 0xba, 0xad, 0x73, 0x41, 0xde, 0xd2, 0xff, 0x47, 0x9e, 0x14, 0x96, 0xaf, 0xfa,
            0x76, 0x8f, 0x67, 0x26, 0x98, 0x2d, 0x87, 0x2d, 0xe7, 0x88, 0x5f, 0x66, 0x17, 0x1e,
            0x40, 0x8c, 0x3b, 0xc7, 0x8d, 0xff, 0xa7, 0x76, 0x68, 0xdd, 0xbe, 0x9c, 0x33, 0xc2,
            0x94, 0xba, 0x6d, 0x85, 0x18, 0xcc, 0x37, 0x13, 0x91, 0x1b, 0xbe, 0xd0, 0x4e, 0xe9,
            0x00, 0x40, 0x4a, 0x15, 0xac, 0xaf, 0xf8, 0x9c,
        ];

        Self {
            key: AesKey::from_bytes(&key_bytes, Endian::Big).unwrap(),
            iv: Iv::from_bytes(&iv_bytes, Endian::Big).unwrap(),
            ptext: PlainText::from_bytes(&ptext_bytes, Endian::Big).unwrap(),
            ctext: CipherText::from_bytes(&ctext_bytes, Endian::Big).unwrap(),
        }
    }
}

pub struct Aes192CtrTestVec {
    pub key: AesKey,
    pub iv: Iv,
    pub ptext: PlainText,
    pub ctext: CipherText,
}

impl Default for Aes192CtrTestVec {
    fn default() -> Self {
        Self::new()
    }
}

impl Aes192CtrTestVec {
    #[must_use]
    pub fn new() -> Self {
        let key_bytes: [u8; 24] = [
            0x39, 0x42, 0x94, 0x8e, 0x26, 0xb3, 0x38, 0x38, 0x2f, 0xe1, 0x42, 0xaf, 0x7f, 0x31,
            0x04, 0x53, 0xa5, 0x24, 0xc5, 0xd7, 0xcc, 0x32, 0xb0, 0xc4,
        ];
        let iv_bytes: [u8; 16] = [
            0x39, 0xee, 0xa7, 0xc6, 0x0d, 0xf3, 0x51, 0x0e, 0xf9, 0xe4, 0xa2, 0x3a, 0xab, 0xa7,
            0x61, 0xd2,
        ];
        let ptext_bytes: [u8; 64] = [
            0xa3, 0xb8, 0x37, 0x08, 0x4e, 0x7b, 0x17, 0xce, 0xfc, 0x87, 0xc1, 0x50, 0x5b, 0xbc,
            0xb2, 0x66, 0x9e, 0xaa, 0x8a, 0x44, 0x81, 0xbc, 0xf1, 0x10, 0xac, 0xf8, 0x02, 0x36,
            0xe0, 0x49, 0xc3, 0xe9, 0xe4, 0x87, 0x62, 0xf1, 0x3e, 0xb6, 0x32, 0x91, 0xee, 0xa0,
            0x59, 0xe0, 0xcf, 0x3a, 0xc9, 0xb7, 0xd7, 0xba, 0x8e, 0x50, 0x6f, 0xb1, 0x6e, 0x36,
            0x15, 0xd4, 0xca, 0xa7, 0xb1, 0x9e, 0xcd, 0x7f,
        ];
        let ctext_bytes: [u8; 64] = [
            0x84, 0xe2, 0x65, 0x95, 0xd2, 0xa1, 0x74, 0xe3, 0x53, 0x47, 0x3f, 0x47, 0x9a, 0xf1,
            0xd8, 0x2d, 0x5e, 0x35, 0xae, 0xfc, 0xb4, 0x3c, 0xd0, 0xf5, 0x86, 0xfd, 0x62, 0x29,
            0xf7, 0x5f, 0x3d, 0xe2, 0x95, 0x56, 0x16, 0x54, 0x0a, 0x14, 0x2b, 0xcc, 0x32, 0x65,
            0x3e, 0x7e, 0x84, 0x41, 0x6b, 0x0e, 0x84, 0xe1, 0x79, 0xa3, 0x1d, 0xb9, 0x3c, 0xa9,
            0x43, 0x6b, 0x26, 0x22, 0xd7, 0xff, 0x5c, 0x62,
        ];

        Self {
            key: AesKey::from_bytes(&key_bytes, Endian::Big).unwrap(),
            iv: Iv::from_bytes(&iv_bytes, Endian::Big).unwrap(),
            ptext: PlainText::from_bytes(&ptext_bytes, Endian::Big).unwrap(),
            ctext: CipherText::from_bytes(&ctext_bytes, Endian::Big).unwrap(),
        }
    }
}

pub struct Aes256CtrTestVec {
    pub key: AesKey,
    pub iv: Iv,
    pub ptext: PlainText,
    pub ctext: CipherText,
}

impl Default for Aes256CtrTestVec {
    fn default() -> Self {
        Self::new()
    }
}

impl Aes256CtrTestVec {
    #[must_use]
    pub fn new() -> Self {
        let key_bytes: [u8; 32] = [
            0x34, 0xe3, 0x76, 0x89, 0x10, 0x87, 0x39, 0xc0, 0xc8, 0xa7, 0x4e, 0x44, 0xe3, 0xe2,
            0xc2, 0xc4, 0x93, 0x12, 0x16, 0xa4, 0x6f, 0xbd, 0x15, 0x57, 0xe9, 0xae, 0x8e, 0x1c,
            0x08, 0xd3, 0x22, 0x4b,
        ];
        let iv_bytes: [u8; 16] = [
            0x9a, 0xc6, 0x4c, 0x6f, 0xca, 0x06, 0x7d, 0x28, 0xa3, 0x3c, 0x27, 0x74, 0x59, 0xaf,
            0xd4, 0x00,
        ];
        let ptext_bytes: [u8; 64] = [
            0xcc, 0x47, 0x2d, 0xf4, 0x72, 0x06, 0xdb, 0xb8, 0xed, 0xe5, 0x37, 0xe0, 0x0b, 0xfe,
            0x3c, 0xb8, 0xe2, 0x76, 0x6d, 0x43, 0x8b, 0xa8, 0xcd, 0xf8, 0x5f, 0x69, 0x26, 0x80,
            0x6e, 0xf4, 0x0f, 0xc3, 0x34, 0x21, 0xbc, 0x2d, 0x1c, 0x6d, 0xf7, 0x81, 0x6f, 0xfa,
            0xa1, 0xe9, 0x5c, 0xbd, 0x3d, 0x1b, 0x16, 0x4e, 0xda, 0xde, 0x6e, 0xac, 0x13, 0xa0,
            0xa8, 0xe0, 0x66, 0x4c, 0x77, 0xa4, 0x77, 0xd7,
        ];
        let ctext_bytes: [u8; 64] = [
            0xd3, 0x44, 0x80, 0x13, 0xa5, 0x7b, 0xa6, 0x1a, 0xa7, 0x80, 0xe4, 0x88, 0x8f, 0xa1,
            0x25, 0x88, 0xf3, 0x77, 0x53, 0xff, 0x6d, 0x39, 0x1f, 0x87, 0xa5, 0xb1, 0xce, 0x62,
            0x65, 0xf5, 0x0d, 0xe4, 0xe4, 0xbe, 0x37, 0x01, 0x09, 0xfa, 0xbd, 0xef, 0x4c, 0xb3,
            0xa7, 0x9a, 0x66, 0xab, 0x37, 0x2e, 0xb4, 0xa5, 0xc2, 0x44, 0xcb, 0xa1, 0x0e, 0xd5,
            0x85, 0xda, 0xec, 0x4b, 0xdc, 0x71, 0x15, 0xda,
        ];

        Self {
            key: AesKey::from_bytes(&key_bytes, Endian::Big).unwrap(),
            iv: Iv::from_bytes(&iv_bytes, Endian::Big).unwrap(),
            ptext: PlainText::from_bytes(&ptext_bytes, Endian::Big).unwrap(),
            ctext: CipherText::from_bytes(&ctext_bytes, Endian::Big).unwrap(),
        }
    }
}

pub struct DesCtrTestVec {
    pub key: DesKey,
    pub iv: Iv,
    pub ptext: PlainText,
    pub ctext: CipherText,
}

impl Default for DesCtrTestVec {
    fn default() -> Self {
        Self::new()
    }
}

impl DesCtrTestVec {
    #[must_use]
    pub fn new() -> Self {
        let key_bytes: [u8; 8] = [0xc5, 0xd2, 0xb6, 0xc2, 0x66, 0x6e, 0x5f, 0x88];
        let iv_bytes: [u8; 8] = [0xb4, 0xb9, 0x0d, 0xc4, 0x50, 0xd7, 0x31, 0x20];
        let ptext_bytes: [u8; 64] = [
            0x5d, 0x43, 0xde, 0x20, 0x0c, 0x6e, 0xe5, 0xa8, 0x1e, 0x1b, 0xac, 0x79, 0xcc, 0xac,
            0x64, 0xf2, 0xb0, 0xed, 0xbf, 0x8c, 0xab, 0xc2, 0x45, 0x2a, 0x43, 0xc0, 0xda, 0x43,
            0x03, 0xa1, 0x15, 0x87, 0x9a, 0xc5, 0x57, 0xdf, 0x26, 0xbd, 0x49, 0x9b, 0x9f, 0xc4,
            0x52, 0x6c, 0xc0, 0x7c, 0xe0, 0xf6, 0x21, 0x68, 0x38, 0x36, 0x5e, 0x46, 0xcd, 0xed,
            0xfb, 0x4e, 0x0f, 0x8a, 0x53, 0x0f, 0x59, 0xc1,
        ];
        let ctext_bytes: [u8; 64] = [
            0x2c, 0xa3, 0x30, 0x91, 0x69, 0x36, 0xd9, 0xe6, 0x5c, 0xf1, 0x1d, 0x08, 0x2f, 0xa9,
            0xdf, 0xf0, 0x80, 0x2e, 0xb8, 0x78, 0xe4, 0xa9, 0xa7, 0x02, 0xc7, 0xe4, 0x53, 0xff,
            0xb8, 0x99, 0x3b, 0x58, 0x98, 0x8e, 0x5c, 0x24, 0x26, 0x5e, 0xf3, 0x66, 0x4e, 0x13,
            0xf1, 0xe5, 0x46, 0xd1, 0xda, 0xfb, 0xb2, 0xff, 0xbc, 0xaa, 0xbc, 0xd3, 0xba, 0xe2,
            0x11, 0x1e, 0x96, 0x89, 0x75, 0x00, 0xd3, 0x1c,
        ];

        Self {
            key: DesKey::from_bytes(&key_bytes, Endian::Big).unwrap(),
            iv: Iv::from_bytes(&iv_bytes, Endian::Big).unwrap(),
            ptext: PlainText::from_bytes(&ptext_bytes, Endian::Big).unwrap(),
            ctext: CipherText::from_bytes(&ctext_bytes, Endian::Big).unwrap(),
        }
    }
}

pub struct TdesCtrTestVec {
    pub key: TdesKey,
    pub iv: Iv,
    pub ptext: PlainText,
    pub ctext: CipherText,
}

impl Default for TdesCtrTestVec {
    fn default() -> Self {
        Self::new()
    }
}

impl TdesCtrTestVec {
    #[must_use]
    pub fn new() -> Self {
        let key_bytes: [u8; 24] = [
            0x5b, 0xe0, 0x2f, 0x92, 0x43, 0x9b, 0x83, 0x92, 0xf8, 0xf7, 0x01, 0x79, 0x29, 0x10,
            0x34, 0x3e, 0x9e, 0xd0, 0xdc, 0xc8, 0x20, 0xc1, 0x15, 0x79,
        ];
        let iv_bytes: [u8; 8] = [0x9d, 0x1f, 0xb8, 0xce, 0xf2, 0x14, 0x35, 0x68];
        let ptext_bytes: [u8; 64] = [
            0x5f, 0xb4, 0xbe, 0x30, 0x54, 0xbc, 0x25, 0x18, 0x2b, 0x75, 0xd0, 0x18, 0xfa, 0x17,
            0xb3, 0xa8, 0xd3, 0x5e, 0x59, 0x6e, 0xdf, 0x3e, 0xb3, 0x5a, 0x11, 0xa6, 0x6f, 0x6c,
            0xbc, 0xff, 0x3d, 0x69, 0xb3, 0xed, 0x8e, 0x77, 0xac, 0x67, 0x24, 0xdd, 0x1a, 0xb7,
            0xa4, 0xba, 0xa6, 0x29, 0xde, 0x0d, 0x63, 0x9e, 0x61, 0xac, 0xcf, 0xdb, 0x48, 0xa7,
            0x50, 0x40, 0xf2, 0xfb, 0x41, 0x09, 0x6c, 0xa5,
        ];
        let ctext_bytes: [u8; 64] = [
            0xa7, 0x79, 0xcb, 0xdd, 0x7f, 0x11, 0x4a, 0x7e, 0x76, 0xc5, 0x3e, 0x6b, 0x64, 0xb2,
            0x3b, 0x63, 0xe1, 0xdc, 0xdf, 0x11, 0x4e, 0xd3, 0x75, 0x3a, 0x8b, 0xce, 0x1d, 0xce,
            0x89, 0x56, 0x17, 0x19, 0xac, 0xd5, 0xe0, 0xda, 0x52, 0xf3, 0xde, 0x02, 0xa1, 0x75,
            0xa5, 0x86, 0x2f, 0xcf, 0x3a, 0x15, 0xf0, 0xbd, 0xab, 0x21, 0x43, 0xef, 0x90, 0x5c,
            0xcf, 0x90, 0xa5, 0x01, 0x0c, 0x06, 0x59, 0xf2,
        ];

        Self {
            key: TdesKey::from_bytes(&key_bytes, Endian::Big).unwrap(),
            iv: Iv::from_bytes(&iv_bytes, Endian::Big).unwrap(),
            ptext: PlainText::from_bytes(&ptext_bytes, Endian::Big).unwrap(),
            ctext: CipherText::from_bytes(&ctext_bytes, Endian::Big).unwrap(),
        }
    }
}
