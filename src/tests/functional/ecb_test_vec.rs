// Licensed under the Apache-2.0 license

use crate::symmetric_cipher::{AesKey, CipherText, DesKey, PlainText, TdesKey};
use proposed_traits::common::{Endian, FromBytes};

// Auto-generated by gen_aes_ecb_vectors_random.py
pub struct Aes128EcbTestVec {
    pub key: AesKey,
    pub ptext: PlainText,
    pub ctext: CipherText,
}

impl Default for Aes128EcbTestVec {
    fn default() -> Self {
        Self::new()
    }
}

impl Aes128EcbTestVec {
    #[must_use]
    pub fn new() -> Self {
        let key_bytes: [u8; 16] = [
            0xad, 0x24, 0x46, 0xd6, 0x79, 0x5e, 0xce, 0xf4, 0xf0, 0x98, 0x29, 0x12, 0x16, 0x6f,
            0xa1, 0x49,
        ];
        let ptext_bytes: [u8; 64] = [
            0xf9, 0xea, 0x7e, 0xf9, 0x57, 0x0c, 0x83, 0x9c, 0xbb, 0xf4, 0x4d, 0x8c, 0x65, 0xa3,
            0xad, 0xd2, 0xc9, 0x1b, 0x6c, 0x81, 0x85, 0x8c, 0xc2, 0x22, 0x23, 0x9b, 0x5b, 0x75,
            0xef, 0x5f, 0xdf, 0xcb, 0x9b, 0x77, 0x65, 0x4f, 0xf9, 0xf2, 0x51, 0xe0, 0xc2, 0xbb,
            0xb6, 0x7d, 0xf4, 0x29, 0xef, 0xd7, 0xa3, 0xf1, 0xc1, 0x51, 0x29, 0xab, 0xf4, 0x44,
            0xe0, 0x4e, 0xed, 0x47, 0xb8, 0x87, 0xd0, 0x09,
        ];
        let ctext_bytes: [u8; 64] = [
            0xdc, 0x58, 0xc4, 0xd6, 0x15, 0xdf, 0x5a, 0xdd, 0xe5, 0xac, 0x9a, 0x97, 0x16, 0xa5,
            0xbd, 0x09, 0x56, 0x62, 0xdc, 0x24, 0x6b, 0x1d, 0x0f, 0xec, 0x2f, 0x07, 0x4e, 0xd6,
            0x5d, 0xfa, 0x4d, 0xf0, 0x79, 0xff, 0x74, 0x4f, 0xf4, 0x1c, 0xae, 0x86, 0x14, 0x5b,
            0x1b, 0x4c, 0xed, 0x06, 0x25, 0x83, 0xfa, 0x04, 0x5f, 0x93, 0x15, 0x44, 0xb9, 0xc0,
            0x70, 0xf3, 0xaa, 0x5e, 0xe7, 0xd7, 0x54, 0x05,
        ];

        Self {
            key: AesKey::from_bytes(&key_bytes, Endian::Big).unwrap(),
            ptext: PlainText::from_bytes(&ptext_bytes, Endian::Big).unwrap(),
            ctext: CipherText::from_bytes(&ctext_bytes, Endian::Big).unwrap(),
        }
    }
}

pub struct Aes192EcbTestVec {
    pub key: AesKey,
    pub ptext: PlainText,
    pub ctext: CipherText,
}

impl Default for Aes192EcbTestVec {
    fn default() -> Self {
        Self::new()
    }
}

impl Aes192EcbTestVec {
    #[must_use]
    pub fn new() -> Self {
        let key_bytes: [u8; 24] = [
            0x3b, 0xeb, 0xfc, 0xd8, 0x78, 0x19, 0x5c, 0x20, 0xc8, 0x98, 0x94, 0x1c, 0x42, 0x6c,
            0x14, 0xed, 0xce, 0x99, 0xca, 0xc8, 0x7a, 0xd0, 0x40, 0x79,
        ];
        let ptext_bytes: [u8; 64] = [
            0xb4, 0xbc, 0x1f, 0x74, 0xf9, 0x22, 0xd1, 0xf8, 0x9e, 0x6f, 0x71, 0x04, 0x76, 0x1f,
            0x23, 0xc8, 0x52, 0xda, 0x71, 0x55, 0xc7, 0x34, 0x8a, 0x93, 0x42, 0x2b, 0x19, 0x05,
            0xa3, 0x2b, 0x0a, 0x3f, 0xd0, 0x34, 0x5c, 0xad, 0x73, 0x7f, 0xf4, 0xb1, 0x99, 0xdc,
            0x6a, 0x55, 0xde, 0x07, 0xb9, 0x54, 0xac, 0xb7, 0xca, 0x72, 0x7a, 0x02, 0x53, 0x49,
            0xaa, 0xbc, 0x63, 0x21, 0xe9, 0xf2, 0x5b, 0xeb,
        ];
        let ctext_bytes: [u8; 64] = [
            0xa1, 0x2e, 0x9f, 0x5a, 0x1b, 0x95, 0xac, 0xa2, 0xbd, 0xd9, 0xa8, 0xde, 0x3b, 0x3e,
            0x65, 0xc5, 0x6c, 0x1d, 0x61, 0x46, 0x16, 0x49, 0x80, 0x2f, 0x1b, 0xb4, 0x59, 0xec,
            0xcd, 0xb7, 0xa7, 0x69, 0xb5, 0xd1, 0x46, 0x3e, 0x9d, 0x5d, 0xea, 0xc7, 0x90, 0xd7,
            0x01, 0x50, 0x39, 0x0b, 0x2b, 0x55, 0xf2, 0x24, 0x92, 0xf3, 0x91, 0x59, 0xb4, 0x40,
            0xf6, 0x47, 0xf2, 0x01, 0x4c, 0xf9, 0x14, 0x3b,
        ];

        Self {
            key: AesKey::from_bytes(&key_bytes, Endian::Big).unwrap(),
            ptext: PlainText::from_bytes(&ptext_bytes, Endian::Big).unwrap(),
            ctext: CipherText::from_bytes(&ctext_bytes, Endian::Big).unwrap(),
        }
    }
}

pub struct Aes256EcbTestVec {
    pub key: AesKey,
    pub ptext: PlainText,
    pub ctext: CipherText,
}

impl Default for Aes256EcbTestVec {
    fn default() -> Self {
        Self::new()
    }
}

impl Aes256EcbTestVec {
    #[must_use]
    pub fn new() -> Self {
        let key_bytes: [u8; 32] = [
            0xe9, 0x89, 0xed, 0x29, 0x1d, 0x6d, 0xd7, 0xcd, 0xae, 0x61, 0x24, 0xca, 0x77, 0xbf,
            0xa8, 0x5f, 0x44, 0xd2, 0xe9, 0x1a, 0xeb, 0x4d, 0xb0, 0xe0, 0xe6, 0xc5, 0xef, 0xdb,
            0x4b, 0x8b, 0xa9, 0xdf,
        ];
        let ptext_bytes: [u8; 64] = [
            0xb6, 0xe0, 0xd2, 0x01, 0xde, 0xf2, 0x84, 0x3d, 0xa5, 0x0c, 0x2a, 0x76, 0x0b, 0x08,
            0xd8, 0x87, 0x2a, 0x4a, 0xa5, 0x13, 0xd5, 0x24, 0x24, 0x13, 0x72, 0x74, 0xfa, 0x40,
            0xc6, 0x8d, 0x90, 0x97, 0xbb, 0x4a, 0x40, 0x9b, 0x5b, 0xd0, 0x32, 0xdf, 0x1b, 0x47,
            0xa8, 0x73, 0xb3, 0x09, 0x04, 0x64, 0x2a, 0x41, 0x3f, 0xc8, 0xef, 0xa1, 0xa1, 0xd2,
            0x38, 0xe2, 0xda, 0x8b, 0x66, 0x73, 0x9c, 0x8d,
        ];
        let ctext_bytes: [u8; 64] = [
            0x84, 0xa4, 0xef, 0x2a, 0x1d, 0xf7, 0x28, 0x98, 0x59, 0xb6, 0x27, 0xd0, 0x90, 0x1c,
            0x3c, 0xba, 0xee, 0xf1, 0x90, 0x0b, 0xe2, 0xd1, 0xfd, 0xbc, 0x88, 0x9f, 0x06, 0x81,
            0x9f, 0x8a, 0xbd, 0x69, 0x4d, 0x01, 0x18, 0xd5, 0xd2, 0x61, 0x52, 0x6d, 0xaf, 0x5c,
            0xce, 0x12, 0xc7, 0x4a, 0xe4, 0x9c, 0x13, 0xd6, 0xb4, 0xea, 0x8d, 0x18, 0xe0, 0x99,
            0x5b, 0x62, 0x96, 0x42, 0xbc, 0x51, 0x62, 0x78,
        ];

        Self {
            key: AesKey::from_bytes(&key_bytes, Endian::Big).unwrap(),
            ptext: PlainText::from_bytes(&ptext_bytes, Endian::Big).unwrap(),
            ctext: CipherText::from_bytes(&ctext_bytes, Endian::Big).unwrap(),
        }
    }
}

pub struct DesEcbTestVec {
    pub key: DesKey,
    pub ptext: PlainText,
    pub ctext: CipherText,
}

impl Default for DesEcbTestVec {
    fn default() -> Self {
        Self::new()
    }
}

impl DesEcbTestVec {
    #[must_use]
    pub fn new() -> Self {
        let key_bytes: [u8; 8] = [0xf3, 0x27, 0xcf, 0x76, 0x17, 0x0d, 0xff, 0x45];
        let ptext_bytes: [u8; 64] = [
            0x29, 0x8c, 0x89, 0xdb, 0xb5, 0xe3, 0x7b, 0xaf, 0xa2, 0x73, 0x45, 0xd4, 0x7d, 0x3c,
            0x69, 0x52, 0x33, 0x6d, 0xdb, 0x97, 0x12, 0xc0, 0x4b, 0x02, 0x81, 0x03, 0xa2, 0x2c,
            0x8e, 0x35, 0xf5, 0x80, 0xb7, 0x22, 0xb9, 0xb4, 0xd1, 0x13, 0x13, 0x76, 0x60, 0xad,
            0x4e, 0xa0, 0x05, 0x4e, 0x56, 0x85, 0x2b, 0x46, 0xd4, 0xef, 0xbc, 0xa4, 0x1a, 0x05,
            0xee, 0x0d, 0x86, 0x44, 0x65, 0x9d, 0xdc, 0x16,
        ];
        let ctext_bytes: [u8; 64] = [
            0x6c, 0x36, 0x97, 0x9d, 0xd8, 0xd7, 0x78, 0x15, 0xa5, 0x63, 0x2a, 0xdc, 0x6d, 0x04,
            0xcc, 0x88, 0x7d, 0x87, 0xea, 0x85, 0xb1, 0x26, 0x7d, 0x43, 0xea, 0xdf, 0x55, 0xfb,
            0x69, 0xfc, 0x43, 0xb9, 0xa9, 0x1a, 0xd4, 0x2b, 0x04, 0x40, 0xf7, 0xb6, 0xea, 0x37,
            0x64, 0x4a, 0xfa, 0xdd, 0x86, 0x6b, 0xca, 0x5c, 0xe5, 0xaf, 0xe4, 0x33, 0xbd, 0x86,
            0xfa, 0x9a, 0x5f, 0x0b, 0x8d, 0x64, 0x07, 0x76,
        ];

        Self {
            key: DesKey::from_bytes(&key_bytes, Endian::Big).unwrap(),
            ptext: PlainText::from_bytes(&ptext_bytes, Endian::Big).unwrap(),
            ctext: CipherText::from_bytes(&ctext_bytes, Endian::Big).unwrap(),
        }
    }
}

pub struct TdesEcbTestVec {
    pub key: TdesKey,
    pub ptext: PlainText,
    pub ctext: CipherText,
}

impl Default for TdesEcbTestVec {
    fn default() -> Self {
        Self::new()
    }
}

impl TdesEcbTestVec {
    #[must_use]
    pub fn new() -> Self {
        let key_bytes: [u8; 24] = [
            0x9d, 0xbc, 0xd3, 0x64, 0x8a, 0x0d, 0x25, 0xd5, 0xcb, 0xb9, 0xd3, 0x86, 0xad, 0xb9,
            0x19, 0x57, 0xa1, 0x58, 0x4c, 0x97, 0x91, 0x6e, 0xad, 0x79,
        ];
        let ptext_bytes: [u8; 64] = [
            0xbe, 0xdf, 0xfa, 0x9d, 0xe8, 0x11, 0xd4, 0xca, 0x05, 0x6a, 0xe2, 0xcb, 0xc4, 0x62,
            0xaf, 0x60, 0x32, 0x55, 0xe2, 0xb2, 0x12, 0x9e, 0x55, 0x14, 0xaf, 0x8f, 0x16, 0x19,
            0xf6, 0x93, 0xfd, 0x39, 0xf5, 0xe4, 0x92, 0x90, 0x31, 0x5c, 0x34, 0xbc, 0x7d, 0x48,
            0x72, 0x70, 0x37, 0xcb, 0x35, 0xec, 0xca, 0x18, 0x8b, 0xae, 0xb0, 0x15, 0xa6, 0x04,
            0xb9, 0xf8, 0x4e, 0x82, 0xaa, 0xa6, 0xd1, 0xb1,
        ];
        let ctext_bytes: [u8; 64] = [
            0xc0, 0x7a, 0x3f, 0x1a, 0x4b, 0x17, 0x1f, 0x97, 0xef, 0x4e, 0x89, 0x1a, 0xd2, 0x34,
            0x39, 0xa6, 0x98, 0xf5, 0x56, 0x41, 0x8b, 0xad, 0x69, 0xf6, 0x61, 0x72, 0x7f, 0x29,
            0xa7, 0x8a, 0x42, 0x9a, 0xb0, 0xbb, 0x74, 0x2d, 0xdd, 0x97, 0x1f, 0xd3, 0xcb, 0xc7,
            0x65, 0x82, 0x17, 0x45, 0x7b, 0x02, 0x70, 0xa7, 0xee, 0x73, 0x1f, 0x41, 0x66, 0x12,
            0x90, 0x87, 0x0e, 0x8a, 0xe8, 0xcc, 0x6e, 0xe8,
        ];

        Self {
            key: TdesKey::from_bytes(&key_bytes, Endian::Big).unwrap(),
            ptext: PlainText::from_bytes(&ptext_bytes, Endian::Big).unwrap(),
            ctext: CipherText::from_bytes(&ctext_bytes, Endian::Big).unwrap(),
        }
    }
}
