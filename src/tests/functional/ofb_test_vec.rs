// Licensed under the Apache-2.0 license

use crate::symmetric_cipher::{AesKey, CipherText, DesKey, Iv, PlainText, TdesKey};
use proposed_traits::common::{Endian, FromBytes};

pub struct Aes128OfbTestVec {
    pub key: AesKey,
    pub iv: Iv,
    pub ptext: PlainText,
    pub ctext: CipherText,
}

impl Default for Aes128OfbTestVec {
    fn default() -> Self {
        Self::new()
    }
}

impl Aes128OfbTestVec {
    #[must_use]
    pub fn new() -> Self {
        let key_bytes: [u8; 16] = [
            0xb3, 0x0f, 0xcb, 0x06, 0xa6, 0xc1, 0xad, 0x8f, 0x29, 0x06, 0xe7, 0x32, 0xb1, 0x0f,
            0x4d, 0xb7,
        ];
        let iv_bytes: [u8; 16] = [
            0x89, 0xd3, 0x5e, 0xa6, 0x8c, 0x08, 0x8a, 0xb3, 0xf6, 0x48, 0x81, 0x8b, 0xa4, 0xa6,
            0x65, 0x6b,
        ];
        let ptext_bytes: [u8; 64] = [
            0xe0, 0xcb, 0x6e, 0x38, 0x2a, 0x5d, 0xff, 0x72, 0xac, 0x1d, 0xda, 0x96, 0x90, 0x81,
            0x37, 0x47, 0x8b, 0xd5, 0x36, 0xcf, 0x4b, 0x77, 0x8a, 0xde, 0x1f, 0xe7, 0xa9, 0x01,
            0x0b, 0x33, 0x41, 0xc2, 0xbd, 0x2b, 0x4a, 0xce, 0xc4, 0x6e, 0xdf, 0x28, 0x7a, 0x43,
            0xb9, 0xb2, 0x11, 0x75, 0x30, 0x6c, 0x76, 0xa8, 0x1a, 0x57, 0x89, 0x93, 0x22, 0x47,
            0x30, 0x81, 0xcd, 0x27, 0x7b, 0xcd, 0x1e, 0x37,
        ];
        let ctext_bytes: [u8; 64] = [
            0x72, 0xd8, 0x8c, 0x2a, 0x81, 0x55, 0x18, 0x3f, 0x27, 0xff, 0xbc, 0x2c, 0x82, 0x76,
            0xce, 0xe4, 0xeb, 0x44, 0xdb, 0xf4, 0x58, 0x9d, 0x9a, 0x47, 0xbb, 0xc3, 0x78, 0xe0,
            0xa8, 0x43, 0x41, 0xb1, 0xa3, 0x43, 0x2a, 0x7e, 0x02, 0xa4, 0x65, 0x05, 0x4e, 0xf3,
            0x0d, 0xbd, 0xef, 0xbd, 0xd3, 0x32, 0x1f, 0x49, 0xf7, 0x86, 0x3e, 0xb7, 0x67, 0x87,
            0x35, 0x91, 0xa2, 0x76, 0x6a, 0x3e, 0x93, 0x24,
        ];

        Self {
            key: AesKey::from_bytes(&key_bytes, Endian::Big).unwrap(),
            iv: Iv::from_bytes(&iv_bytes, Endian::Big).unwrap(),
            ptext: PlainText::from_bytes(&ptext_bytes, Endian::Big).unwrap(),
            ctext: CipherText::from_bytes(&ctext_bytes, Endian::Big).unwrap(),
        }
    }
}

pub struct Aes192OfbTestVec {
    pub key: AesKey,
    pub iv: Iv,
    pub ptext: PlainText,
    pub ctext: CipherText,
}

impl Default for Aes192OfbTestVec {
    fn default() -> Self {
        Self::new()
    }
}

impl Aes192OfbTestVec {
    #[must_use]
    pub fn new() -> Self {
        let key_bytes: [u8; 24] = [
            0x41, 0xa4, 0x65, 0x5d, 0xe9, 0xb2, 0xa3, 0x29, 0x08, 0x2e, 0xc4, 0x5e, 0x53, 0x05,
            0xf3, 0x5a, 0xae, 0x40, 0xa2, 0x35, 0xa4, 0x99, 0x90, 0xab,
        ];
        let iv_bytes: [u8; 16] = [
            0x85, 0xa8, 0x58, 0x44, 0xfe, 0x7e, 0xaa, 0xb3, 0x49, 0x98, 0xc8, 0xef, 0xd8, 0xfa,
            0xfc, 0xae,
        ];
        let ptext_bytes: [u8; 64] = [
            0xab, 0xa5, 0xe5, 0xa5, 0x57, 0x6f, 0x47, 0x12, 0x73, 0x02, 0xf0, 0x9b, 0xe3, 0xef,
            0x8d, 0xa2, 0x01, 0xbe, 0xcf, 0x2b, 0x07, 0x64, 0xbd, 0x88, 0xd4, 0x0d, 0xa8, 0xba,
            0xcb, 0xed, 0xab, 0x3e, 0xef, 0xbe, 0xd4, 0x29, 0x72, 0xaf, 0x56, 0x76, 0xf7, 0xfd,
            0x23, 0x61, 0xf3, 0x4c, 0x1b, 0x45, 0xe6, 0x66, 0x51, 0xfd, 0xa2, 0x6f, 0xe6, 0xec,
            0x28, 0x06, 0xd7, 0xa3, 0xc4, 0x61, 0x2b, 0xb0,
        ];
        let ctext_bytes: [u8; 64] = [
            0x9e, 0xa8, 0xf5, 0xf5, 0x69, 0xf3, 0x32, 0x08, 0x83, 0x46, 0xaa, 0xa0, 0xe6, 0x36,
            0xf0, 0xba, 0x7d, 0x67, 0x26, 0x22, 0x2c, 0xbd, 0xb8, 0xf6, 0x7d, 0x22, 0xa0, 0xad,
            0x0e, 0xfa, 0x40, 0x40, 0xb8, 0x7f, 0x21, 0x03, 0xb8, 0xb1, 0xce, 0xa8, 0xb0, 0xe0,
            0xc9, 0x38, 0xea, 0xbf, 0x0e, 0x7c, 0x29, 0xb3, 0x9f, 0x63, 0x1a, 0x52, 0x93, 0xab,
            0x8e, 0x1b, 0x28, 0xc4, 0x23, 0xc8, 0xce, 0x11,
        ];

        Self {
            key: AesKey::from_bytes(&key_bytes, Endian::Big).unwrap(),
            iv: Iv::from_bytes(&iv_bytes, Endian::Big).unwrap(),
            ptext: PlainText::from_bytes(&ptext_bytes, Endian::Big).unwrap(),
            ctext: CipherText::from_bytes(&ctext_bytes, Endian::Big).unwrap(),
        }
    }
}

pub struct Aes256OfbTestVec {
    pub key: AesKey,
    pub iv: Iv,
    pub ptext: PlainText,
    pub ctext: CipherText,
}

impl Default for Aes256OfbTestVec {
    fn default() -> Self {
        Self::new()
    }
}

impl Aes256OfbTestVec {
    #[must_use]
    pub fn new() -> Self {
        let key_bytes: [u8; 32] = [
            0x95, 0xd1, 0x0f, 0x0c, 0x96, 0x3d, 0x71, 0xdc, 0x35, 0xf7, 0x11, 0x1c, 0xdf, 0x9b,
            0x20, 0x27, 0xc4, 0x4d, 0xa0, 0xa0, 0x81, 0x94, 0xf4, 0x28, 0x8c, 0xb6, 0xc5, 0xca,
            0x54, 0x04, 0x34, 0xae,
        ];
        let iv_bytes: [u8; 16] = [
            0xe8, 0xac, 0x12, 0x6c, 0x34, 0x43, 0xae, 0x98, 0x10, 0x5a, 0x43, 0x10, 0x45, 0x1c,
            0x80, 0x62,
        ];
        let ptext_bytes: [u8; 64] = [
            0x22, 0xcd, 0xb1, 0x61, 0xc9, 0x24, 0x8c, 0x98, 0x99, 0xcf, 0x01, 0xff, 0x02, 0x1e,
            0xd2, 0x77, 0xa9, 0x09, 0x74, 0x87, 0xec, 0xac, 0x5c, 0x40, 0xb9, 0x97, 0x98, 0xf8,
            0x5b, 0x36, 0xa0, 0x8d, 0xed, 0x0e, 0x5c, 0xdc, 0x2f, 0x26, 0x43, 0xf1, 0x90, 0x6b,
            0xf0, 0x02, 0xa7, 0x0d, 0x27, 0xae, 0xb9, 0x39, 0x81, 0xb8, 0x4b, 0x43, 0x53, 0x1d,
            0x17, 0x92, 0x84, 0xae, 0xfd, 0x7e, 0x81, 0xe2,
        ];
        let ctext_bytes: [u8; 64] = [
            0x06, 0x82, 0xa0, 0xb8, 0x15, 0x43, 0x8b, 0x67, 0xc9, 0xac, 0x17, 0x0e, 0xa9, 0xeb,
            0x93, 0xa7, 0x37, 0xe7, 0xb8, 0x00, 0x4c, 0x3b, 0x0c, 0x8b, 0xad, 0xce, 0x31, 0x6a,
            0x22, 0x7c, 0x57, 0xb7, 0xa4, 0xa9, 0x28, 0x8b, 0x9f, 0x28, 0xfd, 0x53, 0xa0, 0x5d,
            0xcf, 0xd3, 0x13, 0x82, 0x11, 0xb8, 0x3d, 0xb8, 0xe0, 0x1e, 0xd4, 0xb3, 0x14, 0x5b,
            0x9c, 0xb4, 0x24, 0x22, 0x8f, 0x1c, 0x97, 0xe7,
        ];

        Self {
            key: AesKey::from_bytes(&key_bytes, Endian::Big).unwrap(),
            iv: Iv::from_bytes(&iv_bytes, Endian::Big).unwrap(),
            ptext: PlainText::from_bytes(&ptext_bytes, Endian::Big).unwrap(),
            ctext: CipherText::from_bytes(&ctext_bytes, Endian::Big).unwrap(),
        }
    }
}

pub struct DesOfbTestVec {
    pub key: DesKey,
    pub iv: Iv,
    pub ptext: PlainText,
    pub ctext: CipherText,
}

impl Default for DesOfbTestVec {
    fn default() -> Self {
        Self::new()
    }
}

impl DesOfbTestVec {
    #[must_use]
    pub fn new() -> Self {
        let key_bytes: [u8; 8] = [0x31, 0x68, 0xd9, 0xed, 0xb5, 0x4e, 0xec, 0x5c];
        let iv_bytes: [u8; 8] = [0xb0, 0xea, 0xf3, 0xe0, 0x8b, 0x05, 0x3e, 0xfc];
        let ptext_bytes: [u8; 64] = [
            0x39, 0x08, 0xe8, 0xd4, 0x2d, 0xcb, 0x88, 0xce, 0xff, 0x3e, 0xb9, 0x4e, 0x37, 0xbf,
            0x4c, 0x3d, 0x1a, 0x2f, 0xd4, 0x0e, 0xa9, 0xc2, 0xa9, 0x3d, 0xb8, 0x3c, 0xc5, 0xe0,
            0xe2, 0x4d, 0x3e, 0x91, 0x76, 0x47, 0x6b, 0xf2, 0x07, 0x6c, 0x29, 0x14, 0x69, 0x62,
            0xed, 0x15, 0xcf, 0x4b, 0x5e, 0xbb, 0xe1, 0xde, 0x69, 0x7c, 0x60, 0xe6, 0xe6, 0xd0,
            0x48, 0xe9, 0xb7, 0x11, 0x00, 0x31, 0x5d, 0xfa,
        ];
        let ctext_bytes: [u8; 64] = [
            0xaa, 0x13, 0x80, 0x46, 0x09, 0x02, 0x53, 0xf4, 0x58, 0x7d, 0x02, 0x23, 0x60, 0x4b,
            0x15, 0x1e, 0x61, 0x27, 0xf9, 0x91, 0x3b, 0x5b, 0xdc, 0x6c, 0x99, 0x0e, 0xda, 0x36,
            0xa8, 0x16, 0x03, 0x9b, 0xc6, 0x84, 0x44, 0xa7, 0xb1, 0x9a, 0x32, 0xf4, 0x22, 0x06,
            0x0e, 0x53, 0xdc, 0xaf, 0x5d, 0x0a, 0x9c, 0x49, 0x74, 0xc0, 0x59, 0xec, 0xf4, 0x48,
            0xfa, 0xfc, 0xeb, 0xf9, 0xcc, 0xbd, 0x18, 0x46,
        ];

        Self {
            key: DesKey::from_bytes(&key_bytes, Endian::Big).unwrap(),
            iv: Iv::from_bytes(&iv_bytes, Endian::Big).unwrap(),
            ptext: PlainText::from_bytes(&ptext_bytes, Endian::Big).unwrap(),
            ctext: CipherText::from_bytes(&ctext_bytes, Endian::Big).unwrap(),
        }
    }
}

pub struct TdesOfbTestVec {
    pub key: TdesKey,
    pub iv: Iv,
    pub ptext: PlainText,
    pub ctext: CipherText,
}

impl Default for TdesOfbTestVec {
    fn default() -> Self {
        Self::new()
    }
}

impl TdesOfbTestVec {
    #[must_use]
    pub fn new() -> Self {
        let key_bytes: [u8; 24] = [
            0xb6, 0x2a, 0x61, 0x38, 0x57, 0x43, 0xd6, 0x01, 0x57, 0x9b, 0x2c, 0x13, 0x6e, 0x10,
            0x34, 0xb5, 0xb6, 0xf7, 0x8f, 0xa1, 0xe0, 0x58, 0x13, 0x0e,
        ];
        let iv_bytes: [u8; 8] = [0xd4, 0xed, 0x9b, 0x3a, 0xc6, 0x25, 0x41, 0x11];
        let ptext_bytes: [u8; 64] = [
            0x26, 0x9b, 0xc9, 0xe7, 0xfb, 0xad, 0x0a, 0x08, 0xc1, 0x10, 0x11, 0xdc, 0x3c, 0xf6,
            0x96, 0x54, 0x13, 0xb5, 0x23, 0x12, 0x50, 0xbc, 0x9f, 0x83, 0x2d, 0xdf, 0xed, 0x3c,
            0x3b, 0x49, 0x4a, 0x47, 0xa7, 0x20, 0x42, 0xab, 0xe7, 0x1f, 0x44, 0x7c, 0x3a, 0x39,
            0xd8, 0x36, 0x33, 0x3c, 0x0b, 0x8a, 0x6f, 0x30, 0xdf, 0x21, 0x2b, 0xa2, 0x2d, 0xb9,
            0x76, 0xdc, 0x7d, 0xef, 0x63, 0xdb, 0xe3, 0xe1,
        ];
        let ctext_bytes: [u8; 64] = [
            0xb4, 0xfc, 0x5c, 0xe4, 0x0a, 0xc1, 0x39, 0xd5, 0x0a, 0x91, 0x9c, 0x06, 0x5a, 0x12,
            0xe3, 0x0b, 0x8c, 0xa3, 0x8c, 0xd8, 0x2b, 0xb3, 0x59, 0xdf, 0x67, 0x50, 0x5f, 0x17,
            0xe7, 0x27, 0x19, 0x3b, 0x99, 0x88, 0x2f, 0x29, 0xdc, 0xd3, 0xc1, 0x62, 0x36, 0xd6,
            0x75, 0xb3, 0xde, 0xce, 0x01, 0xfb, 0x75, 0x77, 0x85, 0x15, 0x05, 0x50, 0x63, 0xfc,
            0xd9, 0x72, 0xcf, 0xdf, 0xe5, 0x48, 0xc2, 0x8a,
        ];

        Self {
            key: TdesKey::from_bytes(&key_bytes, Endian::Big).unwrap(),
            iv: Iv::from_bytes(&iv_bytes, Endian::Big).unwrap(),
            ptext: PlainText::from_bytes(&ptext_bytes, Endian::Big).unwrap(),
            ctext: CipherText::from_bytes(&ctext_bytes, Endian::Big).unwrap(),
        }
    }
}
